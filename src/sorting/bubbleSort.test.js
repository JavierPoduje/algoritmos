import bubbleSort from "./bubbleSort";

test("Array vacío", () => {
  let expected = [];
  let answer = bubbleSort([]);
  expect(answer).toEqual(expected);
});

test("Array ya ordenado", () => {
  let expected = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  let answer = bubbleSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
  expect(answer).toEqual(expected);
});

test("Array desordenado", () => {
  let expected = [2, 3, 5, 5, 6, 8, 9];
  let answer = bubbleSort([8, 5, 2, 9, 5, 6, 3]);
  expect(answer).toEqual(expected);
});

test("Array con un elemento", () => {
  let expected = [1];
  let answer = bubbleSort([1]);
  expect(answer).toEqual(expected);
});

test("Array con dos elementos", () => {
  let expected = [1, 2];
  let answer = bubbleSort([1, 2]);
  expect(answer).toEqual(expected);
});

test("Array con tres elementos", () => {
  let expected = [1, 2, 3];
  let answer = bubbleSort([1, 2, 3]);
  expect(answer).toEqual(expected);
});

test("Array con números negativos", () => {
  let expected = [
    -11, -8, -8, -7, -7, -6, -6, -5, -5, -5, -3, -2, 2, 2, 6, 6, 7, 9, 9, 11,
  ];
  let answer = bubbleSort([
    -5, 6, 11, 9, -11, -7, -5, -3, -6, 2, 6, -5, -6, -2, 2, 7, -8, -7, -8, 9,
  ]);
  expect(answer).toEqual(expected);
});

test("Array con números duplicados", () => {
  let expected = [
    -5, -5, -5, -4, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4,
    4, 5, 5,
  ];
  let answer = bubbleSort([
    -5, -5, -5, -4, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4,
    4, 5, 5,
  ]);
  expect(answer).toEqual(expected);
});

test("Array random 1", () => {
  let expected = [
    -980, -943, -919, -915, -887, -871, -870, -843, -803, -772, -764, -763,
    -743, -741, -704, -682, -657, -654, -628, -621, -587, -575, -568, -566,
    -563, -526, -525, -515, -514, -505, -498, -496, -482, -480, -476, -473,
    -455, -426, -368, -367, -308, -283, -261, -257, -206, -193, -172, -119,
    -112, -105, -57, 14, 17, 21, 87, 92, 129, 131, 142, 143, 159, 165, 173, 223,
    226, 290, 302, 312, 322, 327, 339, 342, 355, 393, 413, 422, 455, 466, 562,
    588, 596, 623, 659, 675, 682, 685, 727, 736, 739, 783, 794, 797, 798, 799,
    814, 831, 853, 918, 929, 937,
  ];
  let answer = bubbleSort([
    -105, -112, -119, -172, -193, -206, -257, -261, -283, -308, -367, -368,
    -426, -455, -473, -476, -480, -482, -496, -498, -505, -514, -515, -525,
    -526, -563, -566, -568, -57, -575, -587, -621, -628, -654, -657, -682, -704,
    -741, -743, -763, -764, -772, -803, -843, -870, -871, -887, -915, -919,
    -943, -980, 129, 131, 14, 142, 143, 159, 165, 17, 173, 21, 223, 226, 290,
    302, 312, 322, 327, 339, 342, 355, 393, 413, 422, 455, 466, 562, 588, 596,
    623, 659, 675, 682, 685, 727, 736, 739, 783, 794, 797, 798, 799, 814, 831,
    853, 87, 918, 92, 929, 937,
  ]);
  expect(answer).toEqual(expected);
});

test("Array random 2", () => {
  let expected = [
    -999, -995, -988, -983, -963, -945, -943, -921, -909, -883, -867, -864,
    -833, -805, -794, -778, -761, -760, -702, -701, -681, -678, -615, -587,
    -500, -492, -483, -455, -428, -406, -361, -342, -306, -298, -284, -273,
    -255, -231, -225, -207, -180, -160, -147, -124, -100, -87, -71, -55, -54,
    -48, -6, 2, 7, 16, 25, 43, 73, 127, 160, 163, 183, 188, 196, 230, 238, 297,
    311, 346, 347, 350, 365, 393, 439, 443, 448, 464, 502, 508, 574, 592, 628,
    642, 647, 651, 674, 692, 696, 741, 743, 744, 761, 766, 810, 818, 859, 878,
    924, 938, 967, 982,
  ];
  let answer = bubbleSort([
    -284, 297, 448, 311, -615, -160, -87, -483, -147, 744, 938, 365, -231, 188,
    592, -983, -678, -100, 743, 878, 346, 859, -794, 196, 16, 761, 183, -342,
    -995, 464, 651, -701, -833, 642, -778, -48, 647, 439, -361, 25, -6, -760,
    -55, 674, 2, 502, 982, -921, 628, -255, 443, 393, -867, -883, -207, 160,
    -225, 810, -761, 230, 127, -909, -492, -124, -428, -805, -306, 692, 350,
    -988, -71, -587, 508, -298, -943, -702, 163, -681, -500, 924, 766, -273,
    238, -945, 574, 741, -864, 73, 347, -999, 43, -455, -963, -180, 967, 818,
    696, -54, -406, 7,
  ]);
  expect(answer).toEqual(expected);
});
